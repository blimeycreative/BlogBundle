<?php

// src/Blogger/BlogBundle/Repository/BlogRepository.php

namespace Blogger\BlogBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogRepository extends EntityRepository {
  
  public function getArchiveList(){
    $blogs = $this->createQueryBuilder('b')
            ->select('b.updated')
            ->addOrderBy('b.updated', 'desc')
            ->getQuery()
            ->getResult();
    
    $dates = array();
    foreach ($blogs as $blog){
      $time = strtotime($blog['updated']);
      $date = date('Y/F', $time);
      if(!in_array($date, $dates))
         $dates[] = $date;
    }
    return $dates;
  }
  
  public function getBlogsByDate($date){
    $date = str_replace('/', ' ', $date);
    $max = date('Y-m-d H:i:s',strtotime($date.' +1 month'));
    $min = date('Y-m-d H:i:s',strtotime($date));

    $blogs = $this->createQueryBuilder('b')
            ->select('b')
            ->where('b.updated > :min and b.updated < :max')
            ->setParameter('min', $min)
            ->setParameter('max', $max)
            ->addOrderBy('b.updated', 'desc')
            ->getQuery()
            ->getResult();   
    return $blogs;
  }

  public function getLatestBlogsForCategory($category, $limit = null) {
    $qb = $this->createQueryBuilder('b')
            ->select('b, co')
            ->leftJoin('b.comments', 'co')
            ->leftJoin('b.categories', 'ca')
            ->where('ca.name = :name')
            ->setParameter('name', $category)
            ->addOrderBy('b.created', 'DESC');

    if (false === is_null($limit))
      $qb->setMaxResults($limit);

    return $qb->getQuery()
                    ->getResult();
  }
  
  public function getOneCategoryForBlog($blog_id){
        $qb = $this->createQueryBuilder('b')
            ->select('ca.name')
            ->leftJoin('b.categories', 'ca')
            ->where('b.id = :id')
            ->setParameter('id', $blog_id)
            ->setMaxResults($limit);
        return $qb->getQuery()->getResult();
  }
  
  public function getTags()
{
    $blogTags = $this->createQueryBuilder('b')
                     ->select('b.tags')
                     ->getQuery()
                     ->getResult();
    
    $tags = array();
    foreach ($blogTags as $blogTag)
    {
        $tags = array_merge(explode(",", $blogTag['tags']), $tags);
    }

    foreach ($tags as &$tag)
    {
        $tag = trim($tag);
    }

    return $tags;
}

public function getTagWeights($tags)
{
    $tagWeights = array();
    if (empty($tags))
        return $tagWeights;

    foreach ($tags as $tag)
    {
        $tagWeights[$tag] = (isset($tagWeights[$tag])) ? $tagWeights[$tag] + 1 : 1;
    }
    // Shuffle the tags
    uksort($tagWeights, function() {
        return rand() > rand();
    });

    $max = max($tagWeights);

    // Max of 5 weights
    $multiplier = ($max > 5) ? 5 / $max : 1;
    foreach ($tagWeights as &$tag)
    {
        $tag = ceil($tag * $multiplier);
    }

    return $tagWeights;
}

  public function getLatestBlogs($limit = null) {
    $qb = $this->createQueryBuilder('b')
            ->select('b, c')
            ->leftJoin('b.comments', 'c')
            ->addOrderBy('b.created', 'DESC');

    if (false === is_null($limit))
      $qb->setMaxResults($limit);

    return $qb->getQuery()
                    ->getResult();
  }
  
  public function getLatestBlogsSummary($category = 0, $number_of_posts = 2, $length = 0){
    $qb = $this->createQueryBuilder('b')
            ->select('b');
            if($category){
              $qb->leftJoin('b.categories', 'ca');
              $qb->where('ca.id = :id');
              $qb->setParameter('id', $category);
            }
            $qb->setMaxResults($number_of_posts);
            return $qb->getQuery()->getResult();
            
  }
  
}